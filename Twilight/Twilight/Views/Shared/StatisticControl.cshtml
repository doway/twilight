<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl<Twilight.Models.StatisticModel>" %>
<table border="0">
    <tr>
        <td>
            <div id="placeholder<%= Model.ID %>" style="height: 150px">
            </div>
        </td>
        <td>
            <div id="choices<%= Model.ID %>">
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            The statistic is about the <strong>past <% =ViewData["INTERVAL"] %> hour</strong> by the BU-<strong><% =ViewData["BUNAME"] %></strong>
        </td>
    </tr>
</table>

<script type="text/javascript">
    $(function() {
    
    var divWidth = getBrowserWidth() * 0.3 + "px";
    document.getElementById("placeholder<%= Model.ID %>").style.width = divWidth;
    
    var choiceContainer = $("#choices<%= Model.ID %>");
        var datasets = null;
        var choiceDict = { <% switch((int)ViewData["MODE"]) { case 1: %>"debug": 1, "info": 1, "warn": 1, "error": 1, "fatal": 1<% break; case 2: %>"1":1, "2":1, "3":1<% break; }; %> }
        function onDataReceived(series) {
            // we get all the data in one go, if we only got partial
            // data, we could merge it with what we already got
            eval(series);
            // hard-code color indices to prevent them from shifting as
            // countries are turned on/off
            var i = 0;
            $.each(datasets, function(key, val) {
                val.color = i;
                ++i;
            });

            // insert checkboxes
            choiceContainer.empty();
            $.each(datasets, function(key, val) {
                choiceContainer.append('<br /><input type="checkbox" name="' + key +
                               ((1 == choiceDict[key]) ? '" checked="checked" id="id' : '" id="id') + key + '">' +
                               '<label for="id' + key + '">'
                                + val.label + '</label>');
            });
            choiceContainer.find("input").click(plotAccordingToChoices);
            plotAccordingToChoices();
        }
        function plotAccordingToChoices() {
            var data = [];

            choiceContainer.find("input:checked").each(function() {
                var key = $(this).attr("name");
                choiceDict[key] = 1;
                if (key && datasets[key])
                    data.push(datasets[key]);
            });
            choiceContainer.find("input:not(:checked)").each(function() {
                var key = $(this).attr("name");
                choiceDict[key] = 0;
            });

            if (data.length > 0)
                $.plot($("#placeholder<%= Model.ID %>"), data, <% =ViewData["CHART_OPTION"] %>);
        }
        function reloadData() {
            $.ajax({
                // usually, we'll just call the same URL, a script
                // connected to a database, but in this case we only
                // have static example files so we need to modify the
                // URL
            url: '<% switch((int)ViewData["MODE"]) { case 1: %><% =Url.Action("StatisticDataByLevel", new { useDbTime = (((int)ViewData["TIMETYPE"]) == 1), pastHrs = (byte)ViewData["INTERVAL"], buId = (short)ViewData["BUID"] }) %><% break; case 2: %><% =Url.Action("StatisticDataByBU", new { useDbTime = (((int)ViewData["TIMETYPE"]) == 1), pastHrs = (byte)ViewData["INTERVAL"], level = (string)ViewData["LEVEL"] }) %><% break; } %>',
                method: 'GET',
                dataType: 'script',
                success: onDataReceived
            });
        }
        reloadData();
        setInterval(reloadData, <%= Twilight.Common.Constants.MBConfig.MONITOR_LIVE_AUTOREFRESH_INTERVAL %>);
    });
    
//get width of broswer
function getBrowserWidth() {
    if ($.browser.msie) {
        return document.compatMode == "CSS1Compat" ? document.documentElement.clientWidth :
                 document.body.clientWidth;
    } else {
        return self.innerWidth;
    }
}      
</script>

